{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","About","Topics","Repos","props","state","link","axios","get","then","response","console","log","data","setState","aja","catch","err","this","Component","GitHubLink","username","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,8LCQrCC,EAAQ,kBACZ,6BAAK,uCAEDC,EAAS,WACb,OACF,6BAAK,wCAGCC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,KAAO,OAFL,E,iFAIE,IAAD,OAClBC,IAAMC,IAAI,8CACTC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAASG,MACrB,EAAKC,SAAS,CAACC,IAAM,YAGpBC,OAAM,SAAAC,GACPN,QAAQC,IAAI,OAAQK,Q,+BAItB,OAAQ,6BAAMC,KAAKb,MAAMC,U,GAjBTa,aAoBdC,E,YACJ,WAAYhB,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,KAAO,IAFL,E,iFAIE,IAAD,OAClBC,IAAMC,IAAI,8BACTC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAASG,MACrB,EAAKC,SAAS,CAACR,KAAOI,EAASG,KAAKQ,cAGnCL,OAAM,SAAAC,GACPN,QAAQC,IAAI,OAAQK,Q,+BAItB,OAAQ,6BAAMC,KAAKb,MAAMC,U,GAjBJa,aAuCVG,E,iLAhBb,OACE,kBAAC,IAAD,KACI,6BACA,6BACA,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,EAAD,OAEI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvB,IACjC,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,SAASC,UAAWzB,IACtC,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,UAAUC,UAAWxB,U,GAXjCiB,aC7CEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.f6068db3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Link} from 'react-router-dom';\nimport axios from 'axios'\n\n\nconst About = () => (\n  <div><h2>About</h2></div>\n)\nconst Topics = () => {\n  return (\n<div><h2>Topics</h2></div>\n  )\n}\nclass Repos extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { link : \"aaa\" }\n  }\n  componentDidMount (){\n    axios.get('https://jsonplaceholder.typicode.com/posts')\n    .then(response => {\n      console.log(response.data);\n      this.setState({aja : \"ue-i\"});\n\n   // catchでエラー時の挙動を定義する\n    }).catch(err => {\n      console.log('err:', err);\n    });\n  }\n  render(){\n    return (<div>{this.state.link}</div>)\n  }\n}\nclass GitHubLink extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { link : \"\" }\n  }\n  componentDidMount (){\n    axios.get('https://localhost/username')\n    .then(response => {\n      console.log(response.data);\n      this.setState({link : response.data.username});\n\n   // catchでエラー時の挙動を定義する\n    }).catch(err => {\n      console.log('err:', err);\n    });\n  }\n  render(){\n    return (<div>{this.state.link}</div>)\n  }\n}\n\nclass App extends Component {\n  render() {\n  return (\n    <Router>\n        <div>\n        <nav>\n        <Link to=\"/\">Home</Link>\n        <GitHubLink />\n      </nav>\n            <Route exact path=\"/\" component={Repos} />\n            <Route exact path=\"/about\" component={About} />\n            <Route exact path=\"/topics\" component={Topics} />\n        </div>\n      </Router>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}